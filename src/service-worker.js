/* eslint-disable no-restricted-globals */
import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file.
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing.
// This ensures all navigation requests are fulfilled with your index.html.
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');

registerRoute(
  ({ request, url }) => {
    // Exclude non-navigation requests.
    if (request.mode !== 'navigate') {
      return false;
    }
    // Skip URLs starting with '/_'.
    if (url.pathname.startsWith('/_')) {
      return false;
    }
    // Skip URLs with a file extension.
    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    }
    // Include all other navigation requests.
    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// Runtime caching for images (e.g., .png files).
registerRoute(
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'),
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 50, // Cache up to 50 images.
        maxAgeSeconds: 30 * 24 * 60 * 60, // Cache for 30 days.
      }),
    ],
  })
);

// Allow the web app to trigger 'skipWaiting' to activate new SW immediately.
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Activate new service worker and claim clients immediately.
self.addEventListener('activate', (event) => {
  event.waitUntil(clientsClaim());
});